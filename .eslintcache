[{"C:\\UI Development\\SprintFrontEnd\\src\\index.js":"1","C:\\UI Development\\SprintFrontEnd\\src\\store\\store.js":"2","C:\\UI Development\\SprintFrontEnd\\src\\reportWebVitals.js":"3","C:\\UI Development\\SprintFrontEnd\\src\\App.js":"4","C:\\UI Development\\SprintFrontEnd\\src\\history.js":"5","C:\\UI Development\\SprintFrontEnd\\src\\Components\\VerticalTabComponent.js":"6","C:\\UI Development\\SprintFrontEnd\\src\\Container\\SprintTrackerGridContainer.js":"7","C:\\UI Development\\SprintFrontEnd\\src\\Container\\SprintProgressGridContainer.js":"8","C:\\UI Development\\SprintFrontEnd\\src\\reducer\\index.js":"9","C:\\UI Development\\SprintFrontEnd\\src\\Container\\PagingContainer.js":"10","C:\\UI Development\\SprintFrontEnd\\src\\Components\\SprintTrackerGridComponent.js":"11","C:\\UI Development\\SprintFrontEnd\\src\\Container\\CreateModalContainer.js":"12","C:\\UI Development\\SprintFrontEnd\\src\\Components\\SprintProgressComponent.js":"13","C:\\UI Development\\SprintFrontEnd\\src\\action\\action.js":"14","C:\\UI Development\\SprintFrontEnd\\src\\reducer\\reducer.js":"15","C:\\UI Development\\SprintFrontEnd\\src\\Components\\LoaderComponent.js":"16","C:\\UI Development\\SprintFrontEnd\\src\\Components\\FailMsgBox.js":"17","C:\\UI Development\\SprintFrontEnd\\src\\Components\\PaginationComponent.js":"18","C:\\UI Development\\SprintFrontEnd\\src\\Components\\CreateModalComponent.js":"19","C:\\UI Development\\SprintFrontEnd\\src\\Container\\ExpandableRowContainer.js":"20","C:\\UI Development\\SprintFrontEnd\\src\\Components\\SuccessMessageComponent.js":"21","C:\\UI Development\\SprintFrontEnd\\src\\constants\\constants.js":"22","C:\\UI Development\\SprintFrontEnd\\src\\Components\\ExpandableRow.js":"23"},{"size":645,"mtime":1630666723805,"results":"24","hashOfConfig":"25"},{"size":210,"mtime":1630666723852,"results":"26","hashOfConfig":"25"},{"size":375,"mtime":1630666723836,"results":"27","hashOfConfig":"25"},{"size":1286,"mtime":1630666723633,"results":"28","hashOfConfig":"25"},{"size":89,"mtime":1630666723805,"results":"29","hashOfConfig":"25"},{"size":756,"mtime":1630666723680,"results":"30","hashOfConfig":"25"},{"size":8231,"mtime":1630666723711,"results":"31","hashOfConfig":"25"},{"size":1034,"mtime":1630666723711,"results":"32","hashOfConfig":"25"},{"size":127,"mtime":1630666723820,"results":"33","hashOfConfig":"25"},{"size":3534,"mtime":1630666723695,"results":"34","hashOfConfig":"25"},{"size":3530,"mtime":1630666723664,"results":"35","hashOfConfig":"25"},{"size":2983,"mtime":1630666723695,"results":"36","hashOfConfig":"25"},{"size":2559,"mtime":1630666723664,"results":"37","hashOfConfig":"25"},{"size":419,"mtime":1630666723727,"results":"38","hashOfConfig":"25"},{"size":1239,"mtime":1630666723820,"results":"39","hashOfConfig":"25"},{"size":199,"mtime":1630666723648,"results":"40","hashOfConfig":"25"},{"size":233,"mtime":1630666723648,"results":"41","hashOfConfig":"25"},{"size":898,"mtime":1630666723648,"results":"42","hashOfConfig":"25"},{"size":3804,"mtime":1630666723633,"results":"43","hashOfConfig":"25"},{"size":411,"mtime":1630666723695,"results":"44","hashOfConfig":"25"},{"size":245,"mtime":1630666723680,"results":"45","hashOfConfig":"25"},{"size":189,"mtime":1630666723758,"results":"46","hashOfConfig":"25"},{"size":242,"mtime":1630666723648,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"dnrlgi",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\UI Development\\SprintFrontEnd\\src\\index.js",[],["103","104"],"C:\\UI Development\\SprintFrontEnd\\src\\store\\store.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\reportWebVitals.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\App.js",["105","106","107","108"],"import SampleLogos from './SampleLogo.jpg'\r\nimport './App.css';\r\nimport React from 'react';\r\nimport SprintTrackerContainer from './Container/SprintTrackerGridContainer';\r\nimport SprintProgressContainer from './Container/SprintProgressGridContainer';\r\nimport VerticalTabComponent from './Components/VerticalTabComponent'\r\nimport {useSelector } from 'react-redux'\r\nimport './customCss/Tab.css';\r\nimport {Router, Route, Link } from \"react-router-dom\";\r\nimport history from './history'\r\nimport profile from './Profile.svg'\r\nimport './customCss/Profile.css';\r\nfunction App() {\r\n  \r\n const sprintTrackerState = useSelector((state)=>state.Reducers.sprintTrackerState)\r\n const sprintProgressState = useSelector((state)=>state.Reducers.sprintProgressState)\r\n   return (\r\n    <div>\r\n      \r\n      <div className=\"AppBar\">\r\n         \r\n        <img src={SampleLogos} className=\"ImageLogo\"/>\r\n        <img src={profile} className=\"svg-icon\" alt=\"logo\"/>\r\n        \r\n      </div>\r\n      \r\n         <Router history={history}>\r\n          <VerticalTabComponent/>\r\n          <Route exact path=\"/\" component={SprintTrackerContainer}/>\r\n          <Route path=\"/sprintProgress\" component={SprintProgressContainer}/>\r\n        </Router>\r\n     \r\n       \r\n       \r\n       </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\UI Development\\SprintFrontEnd\\src\\history.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\Components\\VerticalTabComponent.js",["109"],"import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport '../customCss/Tab.css';\r\nimport history from '../history';\r\n\r\nfunction VerticalTabComponent(props) {\r\n   \r\n    return (\r\n        <div>\r\n        <div className=\"tab\">\r\n        <button class=\"tablinks\" onClick={()=>{history.push('/')}} id=\"defaultOpen\">Sprint Tracker</button>\r\n        <button class=\"tablinks\" onClick={()=>{history.push('/sprintProgress')}}>Sprint Progress</button>\r\n        <button class=\"tablinks\" onClick={()=>{history.push('/sprintDashBoard')}}>Dashboard</button>\r\n        <button class=\"tablinks\" onClick={()=>{history.push('/sprintAnalysis')}}>Analysis</button>\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default (VerticalTabComponent);\r\n","C:\\UI Development\\SprintFrontEnd\\src\\Container\\SprintTrackerGridContainer.js",["110"],"import React, {Component} from 'react';\r\nimport PaginationToolBar from '../Container/PagingContainer';\r\nimport SprintTrackerGridComponent from '../Components/SprintTrackerGridComponent';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as Action from '../action/action';\r\nimport CreateModalContainer from './CreateModalContainer';\r\nimport '../customCss/Tab.css';\r\n\r\nclass SprintTrackerGridContainer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isChecked : false,\r\n            sortState : false, //asc\r\n            createModalState : false,\r\n            checkBoxStateArray : []\r\n        }\r\n     \r\n       \r\n    }\r\n\r\n    componentDidMount(){\r\n       this.props.actionDispatch.setLoader(true);\r\n       this.Load()\r\n       this.setState(state=>{\r\n        \r\n        let checkBoxStateArray =[];\r\n        var  i=0\r\n        while(i<this.props.totalRecords){\r\n            checkBoxStateArray = state.checkBoxStateArray.push(false);\r\n            i++\r\n        }\r\n      \r\n        return{\r\n            checkBoxStateArray\r\n        }\r\n       })\r\n    }\r\n\r\n    Load=()=>{\r\n        const axios = require('axios');\r\n        axios({\r\n            method : 'post',\r\n            url : 'http://localhost:4000/getSprintTrackerGrid.do',\r\n            data : {\r\n                data :\"1\"\r\n            }\r\n        })\r\n        .then((response)=>{\r\n            console.log(response.data)\r\n            if(response.data.status === 200){\r\n                this.props.actionDispatch.setSprintTrackerGridData(response.data.result);\r\n                this.props.actionDispatch.setSprintTrackertotalGridData(response.data.count);\r\n                this.props.actionDispatch.setLoader(false);\r\n            }\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n            this.props.actionDispatch.setLoader(false);\r\n        })\r\n    }\r\n\r\n    extractSearchInput=(event)=>{\r\n      this.setState({\r\n        [event.target.name] : event.target.value\r\n      })\r\n      this.searchApi(event.target.value);\r\n\r\n    }\r\n   checktheCheckBoxOnRowSelection=(index)=>{\r\n     console.log(index);\r\n     this.specificCheckBoxSelection(index);\r\n   \r\n   }\r\n\r\n   specificCheckBoxSelection=(indexPassed)=>{\r\n       console.log(indexPassed)\r\n       let checkBoxStateArray=[];\r\n\r\n       this.setState(state=>{\r\n          checkBoxStateArray= state.checkBoxStateArray.map((value,index)=>{\r\n             if(indexPassed===index){\r\n                 return this.setState({isChecked:!this.state.isChecked});\r\n             }\r\n             else{\r\n                return this.setState({isChecked:false});\r\n            }\r\n             }\r\n         )\r\n            }\r\n        )\r\n\r\n         return{\r\n             checkBoxStateArray\r\n         }\r\n    }\r\n\r\n   \r\n   \r\n    searchApi=(query)=>{\r\n        this.props.actionDispatch.setLoader(true);\r\n        const axios = require('axios');\r\n        axios({\r\n            method : 'post',\r\n            url : 'http://localhost:4000/getSprintTrackerGrid.do',\r\n            data : {\r\n                formQuery : query\r\n            },\r\n        })\r\n        .then((res)=>{\r\n            this.props.actionDispatch.setSprintTrackerGridData(res.data.result);\r\n            this.props.actionDispatch.setSprintTrackertotalGridData(res.data.count);\r\n            this.props.actionDispatch.setLoader(false);\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n            this.props.actionDispatch.setLoader(false);\r\n        })\r\n    }\r\n    changeSortState=(event)=>{\r\n        this.setState({\r\n            sortState : !this.state.sortState\r\n        },()=>{\r\n            if(this.state.sortState === true){\r\n                var descending = -1\r\n                this.sortApi(descending,event);\r\n            }\r\n            else{\r\n                var ascending = 1\r\n                this.sortApi(ascending,event);\r\n            }\r\n        })\r\n    }\r\n    sortApi=(sortKey,event)=>{\r\n        this.props.actionDispatch.setLoader(true);\r\n        const axios = require(\"axios\");\r\n       //    console.log(event.target.name)\r\n        console.log([event])\r\n        var sorting = {\r\n            \"sorting\":{\r\n            [event] : sortKey \r\n        }\r\n       }\r\n        axios({\r\n            method:\"post\",\r\n            url : 'http://localhost:4000/getSprintTrackerGrid.do',\r\n            data : sorting\r\n        })\r\n        .then((res)=>{\r\n            if(res.data.status === 200){\r\n                this.props.actionDispatch.setSprintTrackerGridData(res.data.result);\r\n                this.props.actionDispatch.setSprintTrackertotalGridData(res.data.count);\r\n                this.props.actionDispatch.setLoader(false);\r\n\r\n            }\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n            this.props.actionDispatch.setLoader(false);\r\n        })\r\n    }\r\n\r\n    toCsv=()=>{\r\n        \r\n        var str=\"\";\r\n        for(var i=0;i<this.props.gridSprintTrackerData.length;i++){\r\n            var line = '';\r\n            console.log(\"kkk\");\r\n            for(var key in this.props.gridSprintTrackerData[i]){\r\n                if (line != '') line += ','\r\n\r\n                line +=this.props.gridSprintTrackerData[i][key];\r\n                console.log(line);\r\n            }\r\n            str += line + '\\r\\n';\r\n            console.log(str);\r\n        }\r\n        \r\n      \r\n        var exportedFilenmae =  'export.csv';\r\n        var blob = new Blob([str], { type: 'text/csv;charset=utf-8;' });\r\n       if (navigator.msSaveBlob) { \r\n        console.log(\"blob\")\r\n        navigator.msSaveBlob(blob, exportedFilenmae);\r\n      } \r\n      else {\r\n        var link = document.createElement(\"a\");\r\n        if (link.download !== undefined) { // feature detection\r\n            // Browsers that support HTML5 download attribute\r\n            var url = URL.createObjectURL(blob);\r\n            link.setAttribute(\"href\", url);\r\n            link.setAttribute(\"download\", exportedFilenmae);\r\n            link.style.visibility = 'hidden';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        }\r\n    }     \r\n\r\n\r\n    }\r\n\r\n    changeState=()=>{\r\n        this.setState({\r\n            createModalState: !this.state.createModalState\r\n        })\r\n    }\r\n    closeModal=()=>{\r\n       this.setState({\r\n        createModalState : !this.state.createModalState\r\n       }, console.log(this.state.modalState))\r\n        \r\n    }\r\n  render(){\r\n     \r\n      return(\r\n          <div className=\"tabcontent\">\r\n               {\r\n                  this.state.createModalState===true?<CreateModalContainer totalRecords={this.props.totalRecords} \r\n                  closeCreateModal={this.closeModal}\r\n                  modalState={this.state.createModalState}\r\n                  Load={this.Load}/>:null\r\n                }\r\n              <SprintTrackerGridComponent gridData = {this.props.gridSprintTrackerData }\r\n              extractSearchInput={this.extractSearchInput}\r\n              rowSelection={this.checktheCheckBoxOnRowSelection}\r\n              isChecked={this.state.isChecked}\r\n              specificCheckBoxSelection={this.specificCheckBoxSelection}\r\n              changeSortState={this.changeSortState}\r\n              toCsv={this.toCsv}\r\n              Load={this.Load}\r\n              changeState={this.changeState}\r\n              loaderState={this.props.loaderState}\r\n              checkBoxStateArray={this.state.checkBoxStateArray}/>\r\n             \r\n              <PaginationToolBar\r\n             numberOfPages = {Math.ceil(this.props.totalRecords/this.props.pageSize)}></PaginationToolBar>\r\n          </div>\r\n      )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    console.log(\"reducer page size\")\r\n    console.log(state.Reducers.pageSize)\r\n    return{\r\n\r\n        gridSprintTrackerData : state.Reducers.gridSprintTrackerData,\r\n        totalRecords : state.Reducers.totalSprintGridRecords,\r\n        pageSize:state.Reducers.pageSize,\r\n        loaderState : state.Reducers.loaderState\r\n        \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>(\r\n    {\r\n       actionDispatch :  bindActionCreators(Action, dispatch),\r\n    }\r\n)\r\nexport default connect(mapStateToProps,mapDispatchToProps) (SprintTrackerGridContainer);","C:\\UI Development\\SprintFrontEnd\\src\\Container\\SprintProgressGridContainer.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\reducer\\index.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\Container\\PagingContainer.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\Components\\SprintTrackerGridComponent.js",["111","112"],"import React, {useState} from 'react';\r\nimport '../customCss/SprintGrid.css';\r\nimport ReactDOM from \"react-dom\";\r\nimport LoaderComponent  from './LoaderComponent'\r\n\r\n\r\nfunction SprintTrackerGridComponent(props)\r\n{\r\n   \r\n    \r\n    return (\r\n        \r\n        props.gridData === undefined || props.gridData === null ? <div></div> : \r\n        <div>\r\n          \r\n         <React.Fragment>\r\n            \r\n        <div style={{display:\"flex\"}}>\r\n        <button type=\"button\" className=\"buttonStyle\" onClick={()=>{props.changeState()}}>Create</button>\r\n        <button type=\"button\"   className=\"buttonStyle\">Edit</button>\r\n        <button type=\"button\" className=\"buttonStyle\">Delete</button>\r\n        <button type=\"button\" className=\"btn\" onClick={()=>{props.toCsv()}}></button>\r\n        <button type=\"button\" className=\"Refreshbtn\" onClick={()=>{props.Load()}}></button>\r\n          \r\n        <input type=\"textbox\" className=\"searchTextField\" name=\"searchText\" placeholder=\"Search for Sprint Id\" onInput={props.extractSearchInput}/>\r\n        </div>\r\n        <div >\r\n        <table>\r\n           <thead>\r\n            <tr  key = \"headingTag\"> \r\n              <th ><input type=\"checkbox\"/></th>\r\n              <th onClick={(e)=>{props.changeSortState(\"sprint_id\",e)}} name = \"sprint_id\">Sprint Id</th>\r\n              <th onClick={(e)=>{props.changeSortState(\"sprint_name\",e)}}name = \"sprint_name\">Sprint Name</th>\r\n              <th onClick={(e)=>{props.changeSortState(\"total_items\",e)}}name = \"total_items\">Total Items</th>\r\n              <th onClick={(e)=>{props.changeSortState(\"no_completed_items\",e)}} name = \"no_completed_items\">Total Completed Items </th>\r\n              <th onClick={(e)=>{props.changeSortState(\"no_inprogress_items\",e)}}name = \"no_inprogress_items\">Total InProgress Items</th>\r\n              <th onClick={(e)=>{props.changeSortState(\"no_descoped_items\",e)}} name = \"no_descoped_items\">Total Descoped Items</th>\r\n              \r\n             </tr>\r\n            </thead>\r\n             <tbody>\r\n            { \r\n                \r\n                props.loaderState === true ?<LoaderComponent/> : props.gridData.map((value,index)=>{\r\n                    var checBoxId = index+\"sprintCheck\"\r\n                    \r\n                    \r\n                    return (\r\n                       \r\n                        <tr className = \"rowStyle\" key = {index + \"sprintRow\"} onClick={(index)=>props.rowSelection(index)}>\r\n                            <td ><input type=\"checkbox\" id = {checBoxId} checked={props.checkBoxStateArray[index]}/></td>\r\n                            <td id = {index + \"sprintdata\"}>{value.sprint_id}</td>\r\n                            <td id = {index + \"sprintdata\"}> {value.sprint_name}</td>\r\n                            <td id = {index + \"sprintdata\"}> {value.total_items}</td>\r\n                            <td id = {index + \"sprintdata\"} > {value.no_completed_items}</td>\r\n                            <td id = {index + \"sprintdata\"}> {value.no_inprogress_items}</td>\r\n                            <td id = {index + \"sprintdata\"}> {value.no_descoped_items}</td>\r\n                        </tr>\r\n                        \r\n                    )\r\n                })\r\n               \r\n                \r\n            }\r\n            {\r\n                console.log(props.checkBoxStateArray)\r\n\r\n            }\r\n            </tbody>\r\n        \r\n        </table>\r\n       \r\n       \r\n        \r\n        </div>\r\n       \r\n        </React.Fragment>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SprintTrackerGridComponent;","C:\\UI Development\\SprintFrontEnd\\src\\Container\\CreateModalContainer.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\Components\\SprintProgressComponent.js",["113"],"import React from 'react'\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\nimport  '../customCss/SprintProgress.css';\r\nimport ExpandableRowContainer from '../Container/ExpandableRowContainer';\r\n\r\nconst data =[\r\n    {item_id :\"1\",item_name:\"story1\"},\r\n    {item_id : \"2\",item_name :\"stor2\"},\r\n    {item_id :\"3\",item_name:\"stor4\"},\r\n]\r\n\r\nexport default function SprintProgressComponent(props) {\r\n    return (\r\n        <div>\r\n            <table className=\"tableProgress\">\r\n                <thead>\r\n                   <div className=\"headingDiv\">\r\n                    <tr>\r\n                        <th ></th>\r\n                        <th className=\"heading\"> Item Id</th>\r\n                        <th className=\"heading\">Item Name</th>\r\n                        <th className=\"heading\">Status </th>\r\n                        <th className=\"heading\">Due Date </th>\r\n                        <th className=\"heading\">Lead </th>\r\n\r\n                    </tr>\r\n                   </div> \r\n                </thead>\r\n                <tbody>\r\n                    \r\n                     {\r\n                         data.map((value,index)=>{\r\n                             console.log(props.collapseStatus[index])\r\n                             var indexValue = index;\r\n                             return(\r\n                            <div className=\"gridrowStyle\">\r\n                            <tr  key={index}>\r\n                            <td className=\"tdCell\"><button className=\"collapsible\" onClick={()=>props.collapseStatusChange(indexValue)}></button></td>\r\n                            \r\n                   \r\n                            <td className=\"tdCell\">{value.item_id}</td>\r\n                            <td className=\"tdCell\">{value.item_name}</td>\r\n                            <td className=\"tdCell\">Requrement Gathering</td>\r\n                            <td className=\"tdCell\">20th-Feb-2020</td>\r\n                            <td className=\"tdCell\">Shalini Verma</td>\r\n                          </tr>\r\n                            {\r\n                                props.collapseStatus[index].selected === true ?<tr key={\"subRow\"+index}><td colSpan=\"6\"><ExpandableRowContainer uniqueRow={index}/></td></tr>:null\r\n                           }\r\n                           </div>\r\n                             );\r\n                         })\r\n                     }\r\n                    \r\n                    \r\n                   \r\n                                  \r\n                   \r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n","C:\\UI Development\\SprintFrontEnd\\src\\action\\action.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\reducer\\reducer.js",["114","115","116"],"import * as constants from '../constants/constants'\r\n\r\n\r\nconst initialState = {\r\n    gridSprintTrackerData : null,\r\n    totalSprintGridRecords : null,\r\n    pageSize:10,\r\n    loaderState : false,\r\n   \r\n    \r\n}\r\n\r\nfunction sprintTrackerGridReducer(state = initialState,action){\r\n   switch(action.type){\r\n  case   constants.SPRINT_TRACKER_GRID_DATA : return {\r\n                                            ...state,\r\n                                            gridSprintTrackerData : action.payload\r\n                                            }\r\n                                            break;\r\n  case constants.SPRINT_TRACKER_TOTAL_DATA : return{\r\n                                                ...state,\r\n                                                totalSprintGridRecords : action.payload\r\n                                              }\r\n                                              break;\r\n\r\n  case constants.LOADER_STATE : return{\r\n                                        ...state,\r\n                                        loaderState : action.payload\r\n                                      }\r\n                                      break;\r\n    default : return initialState\r\n   }\r\n\r\n}\r\n\r\nexport default sprintTrackerGridReducer","C:\\UI Development\\SprintFrontEnd\\src\\Components\\LoaderComponent.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\Components\\FailMsgBox.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\Components\\PaginationComponent.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\Components\\CreateModalComponent.js",["117"],"import React from 'react'\r\nimport cssFile from '../customCss/Modal.css'\r\nexport default function CreateModalComponent(props) {\r\n    \r\n    return (\r\n        <div id=\"modalCreate\" className=\"modal\" >\r\n          \r\n            \r\n          \r\n            <div className=\"modalContent\">\r\n           <div className=\"modalHeader\">\r\n             <h5>  Add New Sprint </h5>   \r\n             <div className=\"close\" onClick={()=>{props.close()}}>&times;</div>\r\n           </div>\r\n           <div className=\"modalBody\">\r\n               <div className=\"Items\">\r\n                  <div className=\"modalLabel\">   Sprint Id : </div >\r\n                   <div>\r\n                   <input name=\"sprint_id\" className=\"inputFieldsCss\" onChange={(e)=>{props.saveData(e)}} type=\"textfield\" required/>\r\n                   </div>\r\n                </div>\r\n                <div className=\"Items\">  \r\n                   <div className=\"modalLabel\">\r\n                   Sprint Name :\r\n                   </div> \r\n                   <div>\r\n                       <input type=\"textfield\" name=\"sprint_name\" onChange={(e)=>{props.saveData(e)}} className=\"inputFieldsCss\" required/>\r\n                   </div>\r\n                 </div>\r\n                 <div className=\"Items\">\r\n                     <div className=\"modalLabel\">\r\n                     Total Items : \r\n                     </div>\r\n                     <div>\r\n                     <input type=\"textfield\" name=\"total_items\" onChange={(e)=>{props.saveData(e)}} className=\"inputFieldsCss\" required/>\r\n                     </div>\r\n                </div>\r\n                <div className=\"Items\">\r\n                     <div className=\"modalLabel\">\r\n                     Total Completed Items:\r\n                     </div>\r\n                     <div>\r\n                     <input type=\"textfield\" name=\"no_completed_items\" onChange={(e)=>{props.saveData(e)}} className=\"inputFieldsCss\"/>\r\n                     </div> \r\n                </div>\r\n                <div className=\"Items\">\r\n                     <div className=\"modalLabel\">\r\n                     Total Inprogress Items:\r\n                     </div> \r\n                     <div>\r\n                         <input type=\"textfield\" name=\"no_inprogress_items\" onChange={(e)=>{props.saveData(e)}} className=\"inputFieldsCss\"/>\r\n                     </div>\r\n\r\n                </div>\r\n                <div className=\"Items\"> \r\n                     <div className=\"modalLabel\">\r\n                      Total Descoped Items: \r\n                     </div>\r\n                     <div>\r\n                         <input type=\"textfield\" name=\"no_descoped_items\" onChange={(e)=>{props.saveData(e)}} className=\"inputFieldsCss\"/>\r\n                     </div>\r\n                </div>\r\n                <div className=\"Items\">\r\n                     <div className=\"modalLabel\">\r\n                     Sprint Status:\r\n                     </div> \r\n                     <div>\r\n                         <select name = \"sprint_status\"  onChange={(e)=>{props.saveData(e)}} className=\"inputFieldsCss\">\r\n                     \r\n                         <option value=\"Active\"> Active</option>\r\n                         <option value=\"Inactive\"> Inactive</option>\r\n                         <option value=\"Completed\"> Completed</option>\r\n                        \r\n                         \r\n                         </select>\r\n                     </div>\r\n                </div>\r\n                <div className=\"Items\">\r\n                    <button type=\"button\" className=\"buttonStyle\" onClick={()=>{props.save(); }}>Save</button>\r\n                    <button type=\"button\" className=\"buttonStyle\" onClick={()=>{props.close()}}>Cancel</button>\r\n                </div>\r\n                \r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\UI Development\\SprintFrontEnd\\src\\Container\\ExpandableRowContainer.js",["118"],"import React, { Component } from 'react'\r\nimport ExpandableRow from '../Components/ExpandableRow'\r\nimport '../customCss/ExpandableRow.css'\r\n\r\nexport default class ExpandableRowContainer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"mainDiv\">\r\n                <ExpandableRow/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","C:\\UI Development\\SprintFrontEnd\\src\\Components\\SuccessMessageComponent.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\constants\\constants.js",[],"C:\\UI Development\\SprintFrontEnd\\src\\Components\\ExpandableRow.js",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":9,"column":24,"nodeType":"125","messageId":"126","endLine":9,"endColumn":28},{"ruleId":"123","severity":1,"message":"127","line":15,"column":8,"nodeType":"125","messageId":"126","endLine":15,"endColumn":26},{"ruleId":"123","severity":1,"message":"128","line":16,"column":8,"nodeType":"125","messageId":"126","endLine":16,"endColumn":27},{"ruleId":"129","severity":1,"message":"130","line":22,"column":9,"nodeType":"131","endLine":22,"endColumn":55},{"ruleId":"123","severity":1,"message":"132","line":2,"column":9,"nodeType":"125","messageId":"126","endLine":2,"endColumn":20},{"ruleId":"133","severity":1,"message":"134","line":171,"column":26,"nodeType":"135","messageId":"136","endLine":171,"endColumn":28},{"ruleId":"123","severity":1,"message":"137","line":1,"column":16,"nodeType":"125","messageId":"126","endLine":1,"endColumn":24},{"ruleId":"123","severity":1,"message":"138","line":3,"column":8,"nodeType":"125","messageId":"126","endLine":3,"endColumn":16},{"ruleId":"123","severity":1,"message":"139","line":2,"column":8,"nodeType":"125","messageId":"126","endLine":2,"endColumn":15},{"ruleId":"140","severity":1,"message":"141","line":19,"column":45,"nodeType":"142","messageId":"143","endLine":19,"endColumn":51},{"ruleId":"140","severity":1,"message":"141","line":24,"column":47,"nodeType":"142","messageId":"143","endLine":24,"endColumn":53},{"ruleId":"140","severity":1,"message":"141","line":30,"column":39,"nodeType":"142","messageId":"143","endLine":30,"endColumn":45},{"ruleId":"123","severity":1,"message":"144","line":2,"column":8,"nodeType":"125","messageId":"126","endLine":2,"endColumn":15},{"ruleId":"145","severity":1,"message":"146","line":6,"column":5,"nodeType":"147","messageId":"148","endLine":8,"endColumn":6},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'sprintTrackerState' is assigned a value but never used.","'sprintProgressState' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useDispatch' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useState' is defined but never used.","'ReactDOM' is defined but never used.","'SvgIcon' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'cssFile' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]